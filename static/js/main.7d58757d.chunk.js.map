{"version":3,"sources":["components/AppointmentCard.tsx","components/AppointmentArea.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppointmentCard","appointment","name","date","useState","clientName","setClientName","id","setId","guests","setGuest","className","length","map","guest","type","onChange","e","target","value","placeholder","onClick","AppointmentArea","setName","setDate","appointments","setAppointments","appName","appDate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOA8CeA,EA5CS,SAACC,GAAsB,IACtCC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KAD+B,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,OAGzBF,mBAAS,IAHgB,mBAGtCG,EAHsC,KAGlCC,EAHkC,OAIlBJ,mBAAS,CAAC,CAAEC,WAAY,GAAIE,GAAI,MAJd,mBAItCE,EAJsC,KAI9BC,EAJ8B,KAY7C,OACC,yBAAKC,UAAU,OACd,wBAAIA,UAAU,SAAST,GACvB,wBAAIS,UAAU,YAAYR,GAC1B,yBAAKQ,UAAU,oBACbF,EAAOG,OAAS,GACjB,yBAAKD,UAAU,oBACb,wBAAIA,UAAU,cAAd,wBACA,4BACEF,EAAOI,KAAI,SAACC,GAAD,OAAWA,EAAMT,WAAc,wBAAIM,UAAU,SAASG,EAAMT,YAAmB,QAI9F,yBAAKM,UAAU,eACd,0BAAMA,UAAU,gCAAhB,qCACA,yBAAKA,UAAU,SACd,yBAAKA,UAAU,WACd,2BAAOA,UAAU,iBAAiBI,KAAK,OAAOb,KAAK,aAAac,SAAU,SAAAC,GAAC,OAAIX,EAAcW,EAAEC,OAAOC,QAAQA,MAAOd,EAAYe,YAAY,aAG/I,yBAAKT,UAAU,SACd,yBAAKA,UAAU,WACd,2BAAOA,UAAU,iBAAiBI,KAAK,OAAOb,KAAK,KAAKc,SAAU,SAAAC,GAAC,OAAIT,EAAMS,EAAEC,OAAOC,QAAQA,MAAOZ,EAAIa,YAAY,sBAGvH,4BAAQC,QAAS,kBA9BpBX,EAAS,GAAD,mBAAKD,GAAL,CAAa,CAAEJ,WAAYA,EAAYE,GAAIA,MACnDD,EAAc,SACdE,EAAM,KA4B0CG,UAAU,mBAAvD,gBCLUW,EA/BS,WAAO,IAAD,EACFlB,mBAAS,IADP,mBACnBF,EADmB,KACbqB,EADa,OAEFnB,mBAAS,IAFP,mBAEnBD,EAFmB,KAEbqB,EAFa,OAGcpB,mBAAS,CAAC,CAACF,KAAK,GAAIC,KAAK,MAHvC,mBAGnBsB,EAHmB,KAGLC,EAHK,KAW1B,OACI,6BACI,yBAAKf,UAAU,SACX,yBAAKA,UAAU,WACX,2BAAOA,UAAU,mBAAmBI,KAAK,OAAOb,KAAK,OAAQc,SAAU,SAAAC,GAAC,OAAIM,EAAQN,EAAEC,OAAOC,QAAQA,MAAOjB,EAAMkB,YAAY,YAGtI,yBAAKT,UAAU,SACX,yBAAKA,UAAU,WACX,2BAAOA,UAAU,mBAAmBI,KAAK,OAAOb,KAAK,OAAQc,SAAU,SAAAC,GAAC,OAAIO,EAAQP,EAAEC,OAAOC,QAAQA,MAAOhB,EAAMiB,YAAY,mBAGtI,4BAAQC,QAAS,kBAlBKM,EAkBsBzB,EAlBT0B,EAkBezB,EAjBzDuB,EAAgB,GAAD,mBAAMD,GAAN,CAAoB,CAACvB,KAAKyB,EAASxB,KAAKyB,MACvDL,EAAQ,SACRC,EAAQ,IAHoB,IAACG,EAAaC,GAkBsBjB,UAAU,UAAnE,qBACA,yBAAKA,UAAU,yBACVc,EAAaZ,KAAI,SAACZ,GAAD,OAAiBA,EAAYE,MAAQF,EAAYC,KAAQ,kBAAC,EAAoBD,GAAkB,S,MCfnH4B,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCIcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7d58757d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst AppointmentCard = (appointment: any) => {\r\n\tconst { name, date } = appointment;\r\n\tconst [clientName, setClientName] = useState(\"\");\r\n\tconst [id, setId] = useState('');\r\n\tconst [guests, setGuest] = useState([{ clientName: '', id: '' }]);\r\n\r\n\tconst addGuest = (appName: any, appDate: any): any => {\r\n\t\tsetGuest([...guests, { clientName: clientName, id: id }]);\r\n\t\tsetClientName(\"\");\r\n\t\tsetId('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"box\">\r\n\t\t\t<h2 className=\"title\">{name}</h2>\r\n\t\t\t<h3 className=\"subtitle\">{date}</h3>\r\n\t\t\t<div className=\"guests-container\">\r\n\t\t\t{ guests.length > 1 &&\t\r\n\t\t\t\t<div className=\"confirmed-guests\">\r\n\t\t\t\t\t\t<h6 className=\"title is-6\">Alumnos confirmados:</h6>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t{guests.map((guest) =>(guest.clientName) ? <li className=\"guest\">{guest.clientName}</li> : '')}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t<div className=\"inscripcion\">\r\n\t\t\t\t\t<span className=\"title is-6 inscripcion-title\">Para anotarte, completa tus datos</span>\r\n\t\t\t\t\t<div className=\"field\">\r\n\t\t\t\t\t\t<div className=\"control\">\r\n\t\t\t\t\t\t\t<input className=\"input is-small\" type=\"text\" name=\"clientName\" onChange={e => setClientName(e.target.value)} value={clientName} placeholder=\"Nombre\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"field\">\r\n\t\t\t\t\t\t<div className=\"control\">\r\n\t\t\t\t\t\t\t<input className=\"input is-small\" type=\"text\" name=\"id\" onChange={e => setId(e.target.value)} value={id} placeholder=\"ID del gimnasio\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button onClick={() => addGuest(name, date)} className=\"button is-small\">Anotarse</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default AppointmentCard","import React, { useState, ReactEventHandler } from 'react';\r\nimport AppointmentCard from './AppointmentCard';\r\n\r\nconst AppointmentArea = () => {\r\n    const [name, setName] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [appointments, setAppointments] = useState([{name:'', date:''}]);\r\n\r\n    const CreateNewAppointment = (appName:any, appDate:any):any => {\r\n     setAppointments([ ...appointments, {name:appName, date:appDate}]);\r\n     setName(\"\");\r\n     setDate(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control\">\r\n                    <input className=\"input is-primary\" type=\"text\" name=\"name\"  onChange={e => setName(e.target.value)} value={name} placeholder=\"Clase\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <div className=\"control\">\r\n                    <input className=\"input is-primary\" type=\"text\" name=\"date\"  onChange={e => setDate(e.target.value)} value={date} placeholder=\"Fecha y Hora\" />\r\n                </div>\r\n            </div>\r\n            <button onClick={() => CreateNewAppointment(name, date)} className=\"button\">Agregar una clase</button>\r\n            <div className=\"appointment-container\">\r\n                {appointments.map((appointment) =>(appointment.date && appointment.name) ? <AppointmentCard {...appointment} /> : '')}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AppointmentArea","import React from 'react';\nimport logo from './logo.svg';\nimport AppointmentArea from './components/AppointmentArea';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">      \n      <AppointmentArea />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'bulma/css/bulma.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}